/*
 * Swagger Onboarding
 * This API provides REST end points for Boarding of customer into system.
 *
 * OpenAPI spec version: 8.1.0
 * Contact: DL-WPT-Lords-Of-Code@worldpay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.worldpay.bna.onboarding.services;

import com.worldpay.bna.onboarding.services.invoker.ApiException;
import com.worldpay.bna.onboarding.services.model.Product;
import com.worldpay.bna.onboarding.services.model.ProductItemNumbers;
import com.worldpay.bna.onboarding.services.model.ProductList;
import com.worldpay.bna.onboarding.services.model.ProductPlan;
import com.worldpay.bna.onboarding.services.model.ProductPlanDetailResponse;
import com.worldpay.bna.onboarding.services.model.ProductPlanList;
import com.worldpay.bna.onboarding.services.model.ProductPlanResponse;
import com.worldpay.bna.onboarding.services.model.ProductResponse;
import com.worldpay.bna.onboarding.services.model.ProductSalePriceGroup;
import com.worldpay.bna.onboarding.services.model.ProductSalePriceGroupList;
import com.worldpay.bna.onboarding.services.model.ProductSalePriceGroupResponse;
import com.worldpay.bna.onboarding.services.model.ProductSalePriceSlabList;
import com.worldpay.bna.onboarding.services.model.ProductSalePriceSlabs;
import com.worldpay.bna.onboarding.services.model.ProductSalePriceSlabsResponse;
import com.worldpay.bna.onboarding.services.model.ProductTypeList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductApi
 */
@Ignore
public class ProductApiTest {

    private final ProductApi api = new ProductApi();

    
    /**
     * Add product in system
     *
     * Add product in system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Product product = null;
        ProductResponse response = api.addProduct(userId, userType, dataRoleId, roleId, product);

        // TODO: test validations
    }
    
    /**
     * Add Product Plan in system
     *
     * Returns status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductPlanTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        ProductPlan productPlan = null;
        ProductPlanResponse response = api.addProductPlan(userId, userType, dataRoleId, roleId, productPlan);

        // TODO: test validations
    }
    
    /**
     * Add Product sale price group in system
     *
     * Returns status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductSalePriceGroupTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        ProductSalePriceGroup productSalePriceGroup = null;
        ProductSalePriceGroupResponse response = api.addProductSalePriceGroup(userId, userType, dataRoleId, roleId, productSalePriceGroup);

        // TODO: test validations
    }
    
    /**
     * Add Product Sale Price Slabs in system
     *
     * Returns status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductSalePriceSlabsTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        ProductSalePriceSlabs productSalePriceSlabs = null;
        ProductSalePriceSlabsResponse response = api.addProductSalePriceSlabs(userId, userType, dataRoleId, roleId, productSalePriceSlabs);

        // TODO: test validations
    }
    
    /**
     * Get Product Details
     *
     * Returns Details of Products
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDetailProductsTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        String productPlanCode = null;
        String transactionCountPerMonth = null;
        Integer quantity = null;
        String csAccountCode = null;
        String description = null;
        String status = null;
        String orderType = null;
        String billingForRole = null;
        String agentNumber = null;
        String lastAcceptedDate = null;
        String lastBillDate = null;
        String lastCompleteDate = null;
        String lastGeneratedDate = null;
        Integer terminalTypeId = null;
        Boolean isRefund = null;
        String acquirerMid = null;
        String acquirerMidPrefix = null;
        ProductPlanDetailResponse response = api.getDetailProducts(userId, userType, dataRoleId, roleId, productPlanCode, transactionCountPerMonth, quantity, csAccountCode, description, status, orderType, billingForRole, agentNumber, lastAcceptedDate, lastBillDate, lastCompleteDate, lastGeneratedDate, terminalTypeId, isRefund, acquirerMid, acquirerMidPrefix);

        // TODO: test validations
    }
    
    /**
     * Get Products
     *
     * Returns Array of Products
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Integer id = null;
        String productcode = null;
        String name = null;
        String productTypeCode = null;
        String feeTypeCode = null;
        String partNumber = null;
        String location = null;
        String supplierCode = null;
        String status = null;
        String stockStatus = null;
        String productPlanCode = null;
        ProductList response = api.getProduct(userId, userType, dataRoleId, roleId, id, productcode, name, productTypeCode, feeTypeCode, partNumber, location, supplierCode, status, stockStatus, productPlanCode);

        // TODO: test validations
    }
    
    /**
     * Get Product Item Number
     *
     * Returns List of Product Item Number
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductItemNumberTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        ProductItemNumbers response = api.getProductItemNumber(userId, userType, dataRoleId, roleId);

        // TODO: test validations
    }
    
    /**
     * Get ProductPlans
     *
     * Returns ProductPlans
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductPlanTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Integer id = null;
        String code = null;
        String name = null;
        String status = null;
        ProductPlanList response = api.getProductPlan(userId, userType, dataRoleId, roleId, id, code, name, status);

        // TODO: test validations
    }
    
    /**
     * Get Product Sale Price Group
     *
     * Returns Array of ProductSalePriceGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductSalePriceGroupTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Integer productSalePriceGroupId = null;
        String groupName = null;
        String productCode = null;
        String entityType = null;
        ProductSalePriceGroupList response = api.getProductSalePriceGroup(userId, userType, dataRoleId, roleId, productSalePriceGroupId, groupName, productCode, entityType);

        // TODO: test validations
    }
    
    /**
     * Get Product Sale Price Slabs
     *
     * Returns Array of ProductSalePriceSlabs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductSalePriceSlabsTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Integer productSalePriceSlabsId = null;
        Integer priceGroupNumber = null;
        Integer itemNumber = null;
        ProductSalePriceSlabList response = api.getProductSalePriceSlabs(userId, userType, dataRoleId, roleId, productSalePriceSlabsId, priceGroupNumber, itemNumber);

        // TODO: test validations
    }
    
    /**
     * Get ProductType
     *
     * Returns ProductType
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductTypeTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        String name = null;
        String productCode = null;
        ProductTypeList response = api.getProductType(userId, userType, dataRoleId, roleId, name, productCode);

        // TODO: test validations
    }
    
    /**
     * Update product in system
     *
     * Update product in system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProductTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Product product = null;
        ProductResponse response = api.updateProduct(userId, userType, dataRoleId, roleId, product);

        // TODO: test validations
    }
    
    /**
     * Update Product Plan in system
     *
     * Returns status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProductPlanTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        ProductPlan productPlan = null;
        ProductPlanResponse response = api.updateProductPlan(userId, userType, dataRoleId, roleId, productPlan);

        // TODO: test validations
    }
    
    /**
     * Update Product sale price group in system
     *
     * Returns status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProductSalePriceGroupTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        ProductSalePriceGroup productSalePriceGroup = null;
        ProductSalePriceGroupResponse response = api.updateProductSalePriceGroup(userId, userType, dataRoleId, roleId, productSalePriceGroup);

        // TODO: test validations
    }
    
    /**
     * Update Product sale price slabs in system
     *
     * Returns status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProductSalePriceSlabsTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        ProductSalePriceSlabs productSalePriceSlabs = null;
        ProductSalePriceSlabsResponse response = api.updateProductSalePriceSlabs(userId, userType, dataRoleId, roleId, productSalePriceSlabs);

        // TODO: test validations
    }
    
}
