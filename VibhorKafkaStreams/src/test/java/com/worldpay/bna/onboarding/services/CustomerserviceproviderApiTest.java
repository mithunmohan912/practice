/*
 * Swagger Onboarding
 * This API provides REST end points for Boarding of customer into system.
 *
 * OpenAPI spec version: 8.1.0
 * Contact: DL-WPT-Lords-Of-Code@worldpay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.worldpay.bna.onboarding.services;

import com.worldpay.bna.onboarding.services.invoker.ApiException;
import com.worldpay.bna.onboarding.services.model.CustomerServiceProvider;
import com.worldpay.bna.onboarding.services.model.CustomerServiceProviderResponse;
import com.worldpay.bna.onboarding.services.model.CustomerServiceProviders;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomerserviceproviderApi
 */
@Ignore
public class CustomerserviceproviderApiTest {

    private final CustomerserviceproviderApi api = new CustomerserviceproviderApi();

    
    /**
     * Add customer service provider in system
     *
     * Returns status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCustomerServiceProviderTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        CustomerServiceProvider customerServiceProvider = null;
        CustomerServiceProviderResponse response = api.addCustomerServiceProvider(userId, userType, dataRoleId, roleId, customerServiceProvider);

        // TODO: test validations
    }
    
    /**
     * Find Customer Service Provider
     *
     * Returns list of Customer Service Provider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerServiceProvidersTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        String serviceOperatorName = null;
        String serviceProviderName = null;
        String serviceProviderType = null;
        String mode = null;
        String customerCode = null;
        CustomerServiceProviders response = api.getCustomerServiceProviders(userId, userType, dataRoleId, roleId, serviceOperatorName, serviceProviderName, serviceProviderType, mode, customerCode);

        // TODO: test validations
    }
    
    /**
     * Update customer sp iso in system
     *
     * Returns status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomerSPISOTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        CustomerServiceProvider customerServiceProvider = null;
        CustomerServiceProviderResponse response = api.updateCustomerSPISO(userId, userType, dataRoleId, roleId, customerServiceProvider);

        // TODO: test validations
    }
    
    /**
     * Update customer service provider in system
     *
     * Returns status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomerServiceProviderTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        CustomerServiceProvider customerServiceProvider = null;
        CustomerServiceProviderResponse response = api.updateCustomerServiceProvider(userId, userType, dataRoleId, roleId, customerServiceProvider);

        // TODO: test validations
    }
    
}
