/*
 * Swagger Onboarding
 * This API provides REST end points for Boarding of customer into system.
 *
 * OpenAPI spec version: 8.1.0
 * Contact: DL-WPT-Lords-Of-Code@worldpay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.worldpay.bna.onboarding.services;

import com.worldpay.bna.onboarding.services.invoker.ApiException;
import com.worldpay.bna.onboarding.services.model.BankAccount;
import com.worldpay.bna.onboarding.services.model.BankAccountResponse;
import com.worldpay.bna.onboarding.services.model.BankAccounts;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BankAccountApi
 */
@Ignore
public class BankAccountApiTest {

    private final BankAccountApi api = new BankAccountApi();

    
    /**
     * Add bank account in system
     *
     * Add bank account in system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBankAccountTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        BankAccount bankAccount = null;
        BankAccountResponse response = api.addBankAccount(userId, userType, dataRoleId, roleId, bankAccount);

        // TODO: test validations
    }
    
    /**
     * Find bank account by using following filters like - accountId,bankAccountName,bankCode,bankAccountPurpose,bankAccountRegistration,bankAccountReference.
     *
     * Returns bank account/accounts detail
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBankAccountTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Integer bankAccountId = null;
        String accountCode = null;
        String bankAccountName = null;
        String bankCode = null;
        String bankAccountPurpose = null;
        String bankAccountRegistration = null;
        String bankAccountReference = null;
        BankAccounts response = api.getBankAccount(userId, userType, dataRoleId, roleId, bankAccountId, accountCode, bankAccountName, bankCode, bankAccountPurpose, bankAccountRegistration, bankAccountReference);

        // TODO: test validations
    }
    
    /**
     * Update Bank account
     *
     * Update bank account based on provided ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAccountTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        BankAccount bankAccount = null;
        BankAccountResponse response = api.updateAccount(userId, userType, dataRoleId, roleId, bankAccount);

        // TODO: test validations
    }
    
}
