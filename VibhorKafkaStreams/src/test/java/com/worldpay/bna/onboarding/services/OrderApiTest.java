/*
 * Swagger Onboarding
 * This API provides REST end points for Boarding of customer into system.
 *
 * OpenAPI spec version: 8.1.0
 * Contact: DL-WPT-Lords-Of-Code@worldpay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.worldpay.bna.onboarding.services;

import com.worldpay.bna.onboarding.services.invoker.ApiException;
import com.worldpay.bna.onboarding.services.model.BnaApiResponse;
import java.io.File;
import com.worldpay.bna.onboarding.services.model.Order;
import com.worldpay.bna.onboarding.services.model.OrderConfirmationViewResponse;
import com.worldpay.bna.onboarding.services.model.OrderList;
import com.worldpay.bna.onboarding.services.model.OrderResponse;
import com.worldpay.bna.onboarding.services.model.ProductPlanPrice;
import com.worldpay.bna.onboarding.services.model.ProductPlanPriceResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrderApi
 */
@Ignore
public class OrderApiTest {

    private final OrderApi api = new OrderApi();

    
    /**
     * Add order in system
     *
     * Returns status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOrderTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Order order = null;
        OrderResponse response = api.addOrder(userId, userType, dataRoleId, roleId, order);

        // TODO: test validations
    }
    
    /**
     * Files upload on successful Order Confirmation
     *
     * import file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void callImportTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        String customerAccountCode = null;
        Integer orderId = null;
        File merchantProcessFile = null;
        File merchantAgreementFile = null;
        BnaApiResponse response = api.callImport(userId, userType, dataRoleId, roleId, customerAccountCode, orderId, merchantProcessFile, merchantAgreementFile);

        // TODO: test validations
    }
    
    /**
     * List Orders
     *
     * Returns Orders
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Integer id = null;
        String customerAccountCode = null;
        String terms = null;
        String status = null;
        String renewDate = null;
        String orderType = null;
        String financialAssign = null;
        String customerOrderRefNum = null;
        String categoryType = null;
        Boolean detailRequired = null;
        OrderList response = api.getOrder(userId, userType, dataRoleId, roleId, id, customerAccountCode, terms, status, renewDate, orderType, financialAssign, customerOrderRefNum, categoryType, detailRequired);

        // TODO: test validations
    }
    
    /**
     * Return Order Document
     *
     * Returns Orders
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderConfirmationDocumentTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        String customerAccountCode = null;
        Integer orderId = null;
        String fileType = null;
        OrderConfirmationViewResponse response = api.getOrderConfirmationDocument(userId, userType, dataRoleId, roleId, customerAccountCode, orderId, fileType);

        // TODO: test validations
    }
    
    /**
     * Calculate price
     *
     * Returns status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productPlanPriceTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        ProductPlanPrice productPlanPrice = null;
        ProductPlanPriceResponse response = api.productPlanPrice(userId, userType, dataRoleId, roleId, productPlanPrice);

        // TODO: test validations
    }
    
    /**
     * Update order in system
     *
     * Returns status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrderTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Order order = null;
        OrderResponse response = api.updateOrder(userId, userType, dataRoleId, roleId, order);

        // TODO: test validations
    }
    
}
