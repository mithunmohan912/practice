/*
 * Swagger Onboarding
 * This API provides REST end points for Boarding of customer into system.
 *
 * OpenAPI spec version: 8.1.0
 * Contact: DL-WPT-Lords-Of-Code@worldpay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.worldpay.bna.onboarding.services;

import com.worldpay.bna.onboarding.services.invoker.ApiException;
import com.worldpay.bna.onboarding.services.model.CardsAccepted;
import com.worldpay.bna.onboarding.services.model.CardsAcceptedArrayResponse;
import com.worldpay.bna.onboarding.services.model.CardsAcceptedResponse;
import java.io.File;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CardsacceptedApi
 */
@Ignore
public class CardsacceptedApiTest {

    private final CardsacceptedApi api = new CardsacceptedApi();

    
    /**
     * Adding accepted cards.
     *
     * Adding accepted cards
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCardsAcceptedTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        CardsAccepted cardsAccepted = null;
        CardsAcceptedResponse response = api.addCardsAccepted(userId, userType, dataRoleId, roleId, cardsAccepted);

        // TODO: test validations
    }
    
    /**
     * Fetch Cards Accepted matching the criteria specified
     *
     * Return CSV Export for Cards Accepted fetched
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardsAcceptedExportTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        String terminalID = null;
        Integer terminalNumber = null;
        Integer serviceId = null;
        String agentNumber = null;
        String cardIssuerCode = null;
        Integer cardAcceptedId = null;
        File response = api.getCardsAcceptedExport(userId, userType, dataRoleId, roleId, terminalID, terminalNumber, serviceId, agentNumber, cardIssuerCode, cardAcceptedId);

        // TODO: test validations
    }
    
    /**
     * list accepted cards.
     *
     * listing accepted cards
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCardsAcceptedTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        String terminalID = null;
        Integer terminalNumber = null;
        Integer serviceId = null;
        String agentNumber = null;
        String cardIssuerCode = null;
        Integer cardAcceptedId = null;
        Integer orderId = null;
        CardsAcceptedArrayResponse response = api.listCardsAccepted(userId, userType, dataRoleId, roleId, terminalID, terminalNumber, serviceId, agentNumber, cardIssuerCode, cardAcceptedId, orderId);

        // TODO: test validations
    }
    
    /**
     * Update accepted cards.
     *
     * Updating accepted cards
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCardsAcceptedTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        List<CardsAccepted> cardsAccepted = null;
        CardsAcceptedArrayResponse response = api.updateCardsAccepted(userId, userType, dataRoleId, roleId, cardsAccepted);

        // TODO: test validations
    }
    
}
