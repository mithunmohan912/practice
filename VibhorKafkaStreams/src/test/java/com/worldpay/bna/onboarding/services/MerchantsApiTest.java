/*
 * Swagger Onboarding
 * This API provides REST end points for Boarding of customer into system.
 *
 * OpenAPI spec version: 8.1.0
 * Contact: DL-WPT-Lords-Of-Code@worldpay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.worldpay.bna.onboarding.services;

import com.worldpay.bna.onboarding.services.invoker.ApiException;
import com.worldpay.bna.onboarding.services.model.BnaApiResponse;
import java.io.File;
import com.worldpay.bna.onboarding.services.model.Merchant;
import com.worldpay.bna.onboarding.services.model.MerchantResponse;
import com.worldpay.bna.onboarding.services.model.MerchantsResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MerchantsApi
 */
@Ignore
public class MerchantsApiTest {

    private final MerchantsApi api = new MerchantsApi();

    
    /**
     * Add a new merchant to the portal
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addMerchantTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Merchant merchant = null;
        MerchantResponse response = api.addMerchant(userId, userType, dataRoleId, roleId, merchant);

        // TODO: test validations
    }
    
    /**
     * Add a new test merchant to the portal
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTestMerchantTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Merchant merchant = null;
        BnaApiResponse response = api.addTestMerchant(userId, userType, dataRoleId, roleId, merchant);

        // TODO: test validations
    }
    
    /**
     * Fetching Merchant Details based on Search criteria.
     *
     * Returning CSV Export for List of Merchant Fetched
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMerchantExportTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        String name = null;
        String merchantNumber = null;
        String mode = null;
        String status = null;
        Integer bankAccountId = null;
        String webMerchantFlag = null;
        String customerSupplierAccountCode = null;
        String serviceOperatorCode = null;
        String referredBy = null;
        File response = api.getMerchantExport(userId, userType, dataRoleId, roleId, name, merchantNumber, mode, status, bankAccountId, webMerchantFlag, customerSupplierAccountCode, serviceOperatorCode, referredBy);

        // TODO: test validations
    }
    
    /**
     * Fetching Merchant Details based on Search criteria.
     *
     * Fetching Merchant Details based on Search criteria.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMerchantsTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        String name = null;
        String merchantNumber = null;
        String mode = null;
        String status = null;
        Integer bankAccountId = null;
        String webMerchantFlag = null;
        String customerSupplierAccountCode = null;
        String serviceOperatorCode = null;
        String referredBy = null;
        MerchantsResponse response = api.getMerchants(userId, userType, dataRoleId, roleId, name, merchantNumber, mode, status, bankAccountId, webMerchantFlag, customerSupplierAccountCode, serviceOperatorCode, referredBy);

        // TODO: test validations
    }
    
    /**
     * Update a merchant to the portal
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMerchantTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Merchant merchant = null;
        MerchantResponse response = api.updateMerchant(userId, userType, dataRoleId, roleId, merchant);

        // TODO: test validations
    }
    
}
