/*
 * Swagger Onboarding
 * This API provides REST end points for Boarding of customer into system.
 *
 * OpenAPI spec version: 8.1.0
 * Contact: DL-WPT-Lords-Of-Code@worldpay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.worldpay.bna.onboarding.services;

import com.worldpay.bna.onboarding.services.invoker.ApiException;
import java.io.File;
import com.worldpay.bna.onboarding.services.model.TransactionEmbUpdate;
import com.worldpay.bna.onboarding.services.model.TransactionResponse;
import com.worldpay.bna.onboarding.services.model.TransactionsResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionApi
 */
@Ignore
public class TransactionApiTest {

    private final TransactionApi api = new TransactionApi();

    
    /**
     * Update Transactions on Emboss.
     *
     * Update Transactions on Emboss.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void embUpdateTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        TransactionEmbUpdate transactionEmbUpdate = null;
        TransactionsResponse response = api.embUpdate(userId, userType, dataRoleId, roleId, transactionEmbUpdate);

        // TODO: test validations
    }
    
    /**
     * Get Transaction Details based on Transaction Id.
     *
     * Get Transaction Details based on Transaction Id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Long transactionId = null;
        TransactionResponse response = api.getTransaction(userId, userType, dataRoleId, roleId, transactionId);

        // TODO: test validations
    }
    
    /**
     * Find transaction Report in csv format
     *
     * Returns file of Transaction List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionExportTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        String cardNumber = null;
        String fromDate = null;
        String toDate = null;
        String cardType = null;
        String merchantNumber = null;
        String agentNumber = null;
        String terminalId = null;
        Integer fcrId = null;
        String processingCode = null;
        String cardIssuer = null;
        String externalTransactionReference = null;
        String settlementDate = null;
        String embossSite1 = null;
        String embossSite2 = null;
        File response = api.getTransactionExport(userId, userType, dataRoleId, roleId, cardNumber, fromDate, toDate, cardType, merchantNumber, agentNumber, terminalId, fcrId, processingCode, cardIssuer, externalTransactionReference, settlementDate, embossSite1, embossSite2);

        // TODO: test validations
    }
    
    /**
     * Get Transaction Details based on Search criteria.
     *
     * Get Transaction Details based on Search criteria.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        String cardNumber = null;
        String fromDate = null;
        String toDate = null;
        String cardType = null;
        String merchantNumber = null;
        String agentNumber = null;
        String terminalId = null;
        Integer fcrId = null;
        String processingCode = null;
        String cardIssuer = null;
        String externalTransactionReference = null;
        String settlementDate = null;
        String embossSite1 = null;
        String embossSite2 = null;
        TransactionsResponse response = api.getTransactions(userId, userType, dataRoleId, roleId, cardNumber, fromDate, toDate, cardType, merchantNumber, agentNumber, terminalId, fcrId, processingCode, cardIssuer, externalTransactionReference, settlementDate, embossSite1, embossSite2);

        // TODO: test validations
    }
    
}
