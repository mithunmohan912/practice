/*
 * Swagger Onboarding
 * This API provides REST end points for Boarding of customer into system.
 *
 * OpenAPI spec version: 8.1.0
 * Contact: DL-WPT-Lords-Of-Code@worldpay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.worldpay.bna.onboarding.services;

import com.worldpay.bna.onboarding.services.invoker.ApiException;
import com.worldpay.bna.onboarding.services.model.Agent;
import com.worldpay.bna.onboarding.services.model.AgentResponse;
import com.worldpay.bna.onboarding.services.model.Agents;
import java.io.File;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AgentApi
 */
@Ignore
public class AgentApiTest {

    private final AgentApi api = new AgentApi();

    
    /**
     * Add an agent
     *
     * Adds an agent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAgentTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Agent agent = null;
        AgentResponse response = api.addAgent(userId, userType, dataRoleId, roleId, agent);

        // TODO: test validations
    }
    
    /**
     * Find Agent by Agent Number
     *
     * Returns an Agent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgentTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        String agentNumber = null;
        Agents response = api.getAgent(userId, userType, dataRoleId, roleId, agentNumber);

        // TODO: test validations
    }
    
    /**
     * Fetch Agents based on criteria specified
     *
     * Return CSV Export for list of agents fetched
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgentExportTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        String name = null;
        String merchantNumber = null;
        String mode = null;
        String status = null;
        String accountCode = null;
        File response = api.getAgentExport(userId, userType, dataRoleId, roleId, name, merchantNumber, mode, status, accountCode);

        // TODO: test validations
    }
    
    /**
     * List Agents
     *
     * Returns list of agents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgentsTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        String name = null;
        String merchantNumber = null;
        String mode = null;
        String status = null;
        String accountCode = null;
        Agents response = api.getAgents(userId, userType, dataRoleId, roleId, name, merchantNumber, mode, status, accountCode);

        // TODO: test validations
    }
    
    /**
     * Update an agent
     *
     * Updates an agent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgentTest() throws ApiException {
        String userId = null;
        String userType = null;
        String dataRoleId = null;
        Integer roleId = null;
        Agent agent = null;
        AgentResponse response = api.updateAgent(userId, userType, dataRoleId, roleId, agent);

        // TODO: test validations
    }
    
}
